import asyncio
import logging
import os
from datetime import datetime
from signal import SIGINT, SIGTERM

import asyncpg
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, User
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

REGISTER_NAME, REGISTER_ROLE, JUDGE_DISCIPLINE = range(3)


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    return await asyncpg.create_pool(
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        host=os.getenv('DB_HOST'),
        port=int(os.getenv('DB_PORT'))
    )


async def init_db_schema(pool):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                name TEXT NOT NULL,
                role TEXT NOT NULL,
                discipline TEXT
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS calls (
                id SERIAL PRIMARY KEY,
                judge_id BIGINT REFERENCES users(user_id),
                expert_id BIGINT REFERENCES users(user_id),
                discipline TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS hj_calls (
                id SERIAL PRIMARY KEY,
                judge_id BIGINT REFERENCES users(user_id) NOT NULL,
                head_judge_id BIGINT REFERENCES users(user_id),
                created_at TIMESTAMP NOT NULL,
                resolved_at TIMESTAMP)
        """)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        pool = context.bot_data['db_pool']
        user_id = update.effective_user.id

        async with pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

        if user:
            await (update.message or update.callback_query.message).reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return ConversationHandler.END
        else:
            await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
            return REGISTER_NAME

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç", callback_data="expert")],
            [InlineKeyboardButton("–°—É–¥—å—è", callback_data="judge")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è", callback_data="head_judge")]
        ])
    )
    return REGISTER_ROLE


async def register_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    query = update.callback_query
    await query.answer()

    role = query.data
    context.user_data['role'] = role

    if role == "judge":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–≠—Å—Ç–∞—Ñ–µ—Ç–∞", callback_data="relay")],
                [InlineKeyboardButton("–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ LEGO", callback_data="practicallego")],
                [InlineKeyboardButton("–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ª–∏–Ω–∏–∏ –æ–±—Ä. –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã", callback_data="linecons")],
                [InlineKeyboardButton("–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ª–∏–Ω–∏–∏: BEAM", callback_data="BEAMline")],
                [InlineKeyboardButton("–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É–∑–∫–æ–π –ª–∏–Ω–∏–∏", callback_data="narrowline")],
                [InlineKeyboardButton("–õ–∞–±–∏—Ä–∏–Ω—Ç", callback_data="maze")],
                [InlineKeyboardButton("RoboCup", callback_data="robocup")],
                [InlineKeyboardButton("–í–æ–∑–¥—É—à–Ω—ã–µ –≥–æ–Ω–∫–∏", callback_data="airrace")],
                [InlineKeyboardButton("–°—É–º–æ", callback_data="sumo")],
                [InlineKeyboardButton("–ê–∫–≤–∞—Ä–æ–±–æ—Ç—ã", callback_data="aqua")],
                [InlineKeyboardButton("OnStage", callback_data="onstage")],
                [InlineKeyboardButton("–ú–∞—Ä–∞—Ñ–æ–Ω —à–∞–≥–∞—é—â–∏—Ö —Ä–æ–±–æ—Ç–æ–≤", callback_data="walking")],
                [InlineKeyboardButton("–§—É—Ç–±–æ–ª –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π", callback_data="footballauto")],
                [InlineKeyboardButton("–†–∞–ª–ª–∏ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É", callback_data="rally")],
                [InlineKeyboardButton("–°—É–º–æ –∞–Ω–¥—Ä–æ–∏–¥–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–≤", callback_data="android")],
                [InlineKeyboardButton("–ú–∏–Ω–∏ —Å—É–º–æ", callback_data="minisumo")],
                [InlineKeyboardButton("–ú–∏–∫—Ä–æ —Å—É–º–æ", callback_data="microsumo")],
            ])
        )
        return JUDGE_DISCIPLINE
    else:
        return await complete_registration(update, context)


async def judge_discipline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    context.user_data['discipline'] = query.data
    return await complete_registration(update, context)


async def complete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        pool = context.bot_data['db_pool']
        user_data = context.user_data

        message = update.message or update.callback_query.message

        async with pool.acquire() as conn:
            if user_data['role'] == "judge":
                await conn.execute(
                    """INSERT INTO users (user_id, name, role, discipline)
                    VALUES ($1, $2, $3, $4)""",
                    update.effective_user.id,
                    user_data['name'],
                    user_data['role'],
                    user_data.get('discipline')
                )
            else:
                await conn.execute(
                    """INSERT INTO users (user_id, name, role)
                    VALUES ($1, $2, $3)""",
                    update.effective_user.id,
                    user_data['name'],
                    user_data['role']
                )

        await message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await show_main_menu(update, context)
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        message = update.callback_query.message if update.callback_query else update.message
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def call_expert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()

    pool = context.bot_data['db_pool']
    judge_id = query.from_user.id

    try:
        async with pool.acquire() as conn:
            judge = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1 AND role = 'judge'", judge_id)
            if not judge:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!")
                return

            call_id = await conn.fetchval(
                """INSERT INTO calls (judge_id, discipline, created_at) 
                VALUES ($1, $2, $3) RETURNING id""",
                judge_id,
                judge['discipline'],
                datetime.now()
            )

            experts = await conn.fetch("SELECT user_id FROM users WHERE role = 'expert'")
            for expert in experts:
                try:
                    await context.bot.send_message(
                        expert['user_id'],
                        f"üîî –°—É–¥—å—è {judge['name']} –≤—ã–∑—ã–≤–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞!\n"
                        f"üìç –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {judge['discipline']}\n"
                        f"üÜî ID –≤—ã–∑–æ–≤–∞: {call_id}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_expert_{call_id}")]
                        ])
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç—É {expert['user_id']}: {e}")

        await query.edit_message_text("‚úÖ –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω!")
        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def call_head_judge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    pool = context.bot_data['db_pool']
    judge_id = query.from_user.id

    try:
        async with pool.acquire() as conn:
            judge = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1 AND role = 'judge'", judge_id)
            if not judge:
                await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å—é!")
                return

            call_id = await conn.fetchval(
                """INSERT INTO hj_calls (judge_id, created_at) 
                VALUES ($1, $2) RETURNING id""",
                judge_id,
                datetime.now()
            )

            head_judges = await conn.fetch("SELECT user_id FROM users WHERE role = 'head_judge'")
            for hj in head_judges:
                try:
                    await context.bot.send_message(
                        hj['user_id'],
                        f"üîî –°—É–¥—å—è {judge['name']} –≤—ã–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å—é!\n"
                        f"üìç –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {judge.get('discipline', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                        f"üÜî ID –≤—ã–∑–æ–≤–∞: {call_id}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"respond_hj_{call_id}")]
                        ])
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É —Å—É–¥—å–µ {hj['user_id']}: {e}")

        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞"
        await query.edit_message_text(
            "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–ª–∞–≤–Ω—ã–º —Å—É–¥—å—è–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def respond_to_call(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    pool = context.bot_data['db_pool']
    responder_id = query.from_user.id
    call_type, call_id = query.data.split('_')[1], int(query.data.split('_')[2])

    try:
        async with pool.acquire() as conn:
            if call_type == "expert":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
                responder = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1 AND role = 'expert'", responder_id)
                if not responder:
                    await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä—Ç—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤!")
                    return

                call = await conn.fetchrow("SELECT * FROM calls WHERE id = $1", call_id)
                if not call:
                    await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return

                if call['expert_id'] is not None:
                    await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º!")
                    return

                await conn.execute(
                    "UPDATE calls SET expert_id = $1 WHERE id = $2",
                    responder_id,
                    call_id
                )

                judge = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", call['judge_id'])
                await context.bot.send_message(
                    judge['user_id'],
                    f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç {responder['name']} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤—ã–∑–æ–≤!\n"
                    f"–û–Ω —É–∂–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º."
                )

                await query.edit_message_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤—ã–∑–æ–≤!")

            elif call_type == "hj":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏
                responder = await conn.fetchrow(
                    "SELECT * FROM users WHERE user_id = $1 AND role = 'head_judge'",
                    responder_id
                )
                if not responder:
                    await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ —Å—É–¥—å–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã–∑–æ–≤—ã!")
                    return

                call = await conn.fetchrow(
                    """SELECT * FROM hj_calls 
                    WHERE id = $1 AND head_judge_id IS NULL
                    FOR UPDATE""",
                    call_id
                )
                if not call:
                    await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    return

                await conn.execute(
                    """UPDATE hj_calls 
                    SET head_judge_id = $1, resolved_at = $2
                    WHERE id = $3""",
                    responder_id,
                    datetime.now(),
                    call_id
                )

                judge = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", call['judge_id'])
                await context.bot.send_message(
                    judge['user_id'],
                    f"‚úÖ –ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è {responder['name']} –ø—Ä–∏–Ω—è–ª –≤–∞—à –≤—ã–∑–æ–≤!\n"
                    f"–û–Ω —É–∂–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º."
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –º–µ–Ω—é)
                await query.edit_message_text(
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤ –æ—Ç —Å—É–¥—å–∏ {judge['name']}\n"
                    f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {judge.get('discipline', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if call and 'judge_id' in call:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å—É–¥—å–∏
            await show_main_menu(
                Update(
                    update.update_id,
                    callback_query=CallbackQuery(
                        id=str(update.update_id),
                        from_user=User(id=call['judge_id'], first_name=judge['name'], is_bot=False),
                        message=query.message,
                        chat_instance=query.chat_instance
                    )
                ),
                context
            )

        if call_type == "hj":
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏
            await show_main_menu(
                Update(
                    update.update_id,
                    callback_query=CallbackQuery(
                        id=str(update.update_id),
                        from_user=User(id=responder_id, first_name=responder['name'], is_bot=False),
                        message=query.message,
                        chat_instance=query.chat_instance
                    )
                ),
                context
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤—ã–∑–æ–≤: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞.")



async def cancel_call(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–∑–æ–≤–æ–≤ (—ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –≥–ª–∞–≤–Ω—ã—Ö —Å—É–¥–µ–π)"""
    query = update.callback_query
    await query.answer()

    pool = context.bot_data['db_pool']
    judge_id = query.from_user.id

    try:
        async with pool.acquire() as conn:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            expert_calls = await conn.execute(
                "DELETE FROM calls WHERE judge_id = $1 AND expert_id IS NULL",
                judge_id
            )

            # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏
            hj_calls = await conn.execute(
                "DELETE FROM hj_calls WHERE judge_id = $1 AND head_judge_id IS NULL",
                judge_id
            )

            total_cancelled = int(expert_calls[-1]) + int(hj_calls[-1])
            if total_cancelled == 0:
                await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            else:
                await query.edit_message_text(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {total_cancelled} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.")

        await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–∑–æ–≤–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–∑–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ"""
    pool = context.bot_data['db_pool']
    user_id = update.effective_user.id

    try:
        message = update.message or update.callback_query.message

        async with pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

            if not user:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
                return

            if user['role'] == "judge":
                active_expert_calls = await conn.fetchval(
                    "SELECT COUNT(*) FROM calls WHERE judge_id = $1 AND expert_id IS NULL",
                    user_id
                )

                active_hj_calls = await conn.fetchval(
                    "SELECT COUNT(*) FROM hj_calls WHERE judge_id = $1 AND head_judge_id IS NULL",
                    user_id
                )

                text = (
                    f"üë®‚Äç‚öñÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–¥—å–∏ ({user.get('discipline', '–±–µ–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã')})\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {active_expert_calls}\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏: {active_hj_calls}"
                )

                keyboard = [
                    [InlineKeyboardButton("üì¢ –í—ã–∑–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞", callback_data="call_expert")],
                    [InlineKeyboardButton("üÜò –í—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å—é", callback_data="call_head_judge")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—ã–∑–æ–≤—ã", callback_data="cancel_calls")],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
                ]

            elif user['role'] == "head_judge":
                active_calls = await conn.fetchval(
                    "SELECT COUNT(*) FROM hj_calls WHERE head_judge_id IS NULL"
                )

                text = (
                    "üë®‚Äç‚öñÔ∏è –í—ã –≥–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è\n"
                    f"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∑–æ–≤–æ–≤: {active_calls}"
                )

                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
                ]

            else:  # expert
                text = "üõé –í—ã —ç–∫—Å–ø–µ—Ä—Ç. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–∑–æ–≤–æ–≤."
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
                ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                if "Message is not modified" not in str(edit_error):
                    raise edit_error
        else:
            await message.reply_text(
                text,
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        message = update.message or (update.callback_query.message if update.callback_query else None)
        if message:
            await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def refresh_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–∑–æ–≤–æ–≤"""
    query = update.callback_query
    await query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    await show_main_menu(update, context)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    pool = None
    application = None

    try:
        pool = await init_db()
        await init_db_schema(pool)

        application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
        application.bot_data['db_pool'] = pool

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
                REGISTER_ROLE: [CallbackQueryHandler(register_role, pattern="^(expert|judge|head_judge)$")],
                JUDGE_DISCIPLINE: [CallbackQueryHandler(judge_discipline,
                                                      pattern="^(relay|practicallego|linecons|BEAMline|narrowline|maze|robocup|airrace|sumo|aqua|onstage|walking|footballauto|rally|android|minisumo|microsumo)$")]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            per_chat=True,
            per_user=True
        )

        application.add_handler(conv_handler)
        application.add_handler(CallbackQueryHandler(call_expert, pattern="^call_expert$"))
        application.add_handler(CallbackQueryHandler(call_head_judge, pattern="^call_head_judge$"))
        application.add_handler(CallbackQueryHandler(respond_to_call, pattern=r"^respond_(expert|hj)_\d+$"))
        application.add_handler(CallbackQueryHandler(cancel_call, pattern="^cancel_calls$"))
        application.add_handler(CallbackQueryHandler(refresh_status, pattern="^refresh_status$"))

        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        loop = asyncio.get_running_loop()
        stop_event = asyncio.Event()

        for sig in (SIGINT, SIGTERM):
            loop.add_signal_handler(sig, stop_event.set)

        await stop_event.wait()

    except Exception as e:
        print(e)
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if application:
            if application.updater and application.updater.running:
                await application.updater.stop()
            await application.stop()
            await application.shutdown()
        if pool:
            await pool.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass